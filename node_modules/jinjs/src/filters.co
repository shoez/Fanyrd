_filters = exports

_filters.\in = (obj, arr) ->
    x = null
    for x in arr
        if arr.hasOwnProperty (x) and obj is arr[x]
            return true
    return false

_filters.\abs = (num) ->
    return -num if num < 0
    num

_filters.\capitalize = (str) ->
    return str.charAt(0).toUpperCase() + str.slice(1)

_filters.\default = (value, default_value) ->
    return default_value if value is undefined
    value

_filters.\filesizeformat = (value) ->
    if value < 1024
        return "#{value}"
    if value < 1024 * 1024
        val = val / 1024
        unit = "Kb"
    else if value < 1024 * 1024 * 1024
        val = val / (1024 * 1024)
        unit = "Mb"
    else
        val = val / (1024 * 1024 * 1024)
        unit = "Gb"

    strval = "#{Math.round val}"
    return "#{val.toPrecision strval.length + 3}Kb"

_filters.\first = (arr) ->
    return arr[0]

_filters.\last = (arr) ->
    return null if not arr?.length
    arr[arr.length - 1]

_filters.\groupby = (arr, attribute) ->
    # FIXME : Chain objects in array that have the same attribute.
    return _arr

_filters.\join = (arr, string) ->
    i = 0
    _l = arr.length
    _res = ""

    for i from 0 to l - 1
        if i > 0
            _res += string
        _res += arr[i].toString ()
    return _res

_filters.\length = (arr) ->
    if not arr?
        return 0
    arr.length

_filters.\lower = (value) ->
    value.toLowerCase ()

_filters.\upper = (value) ->
    value.toUpperCase ()

_filters.\replace = (string, regexp, newvalue) ->
    string.replace regexp, newvalue

_filters.\reverse = (arr) ->
    new_arr = arr.splice 0
    new_arr.reverse()
    return new_arr

_filters.\round = (value, precision) ->
    precision ?= 0
    value.toFixed precision

_filters.\trim = (value) ->
    value?.trim() ? ""
