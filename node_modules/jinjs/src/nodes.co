
{ parse:make_expression } = require \./expression

make_parse_rule = (rule_name) ->
    return (contents, ctx) -> make_expression contents, rule_name, ctx

parse_for = make_parse_rule \tag_for
parse_let = make_parse_rule \tag_let
parse_macro = make_parse_rule \tag_macro
parse_extends = make_expression
parse_block = make_parse_rule \tag_block
parse_import = make_parse_rule \tag_import
parse_string = make_parse_rule \string

function trim (string) -> return if not string then "" else string.replace(/^\s*|\s*$/, '')
/**
 *  @param str  a string
 *  @returns    an escaped string suitable to be quoted.
 */
function escape (str) ->
    str.replace /\\/g, '\\\\' # Backslash escaping
        .replace /["']/g, (str) -> # Quote escaping
            "\\#{str}"
        .replace /\n/g, '\\n' # New line escaping
        .replace /\r/g, '\\r' # Carriage return
        .replace /\t/g, '\\t' # Carriage return

function template_expr_is_string (expr) ->
    try
        parse_string expr
        return true
    catch e
        return false

/**
 *
 */
class Node
    (specs) ->
        @contents = specs.contents if specs?.contents
    compile: ->
        throw new Error "This function should never be called."
    ind: (opts) ->
        opts.__indent__ ?= 0
        opts.__indent__ = opts.__indent__ + 1
        ind = opts.__indent__ * 4
        return "\n" + (" " * ind)
    ded: (opts) ->
        opts.__indent__ ?= 1
        opts.__indent__ = opts.__indent__ - 1
        ind = opts.__indent__ * 4
        return "\n" + " " * ind
    cur: (opts) ->
        ind = (opts.__indent__ ? 0) * 4
        return "\n" + " " * ind
/**
 *
 */
class NodeBasic extends Node
    (specs) -> super ...
    compile: function (opts, ctx) ->
        "#{@cur opts}_res += '#{escape @contents}';"

    append: function (contents) ->
        @contents += contents

class NodeComment extends Node
    (specs) ->
        @contents = specs.contents ? ""

    compile: function (opts, ctx) ->
        "#{@cur opts}/*#{@contents}*/"

/**
 *  A collection of Nodes.
 */
class NodeList extends Node
    (specs) ->
        @nodes = []
        super ...

    push: function (node) ->
        if not node?
            return

        if typeof node == \string # node is a String
            last_node = @nodes[@nodes.length - 1]
            if last_node instanceof NodeBasic
                last_node.append node
            else
                @nodes.push new NodeBasic contents: node
        else
            @nodes.push node
        
    compile: function (opts, ctx) ->
        ctx ?= {}
        res = ""
        for node of @nodes
            res += node.compile opts, ctx
        return res

/**
 *
 */
class NodePrint extends Node
    (specs) -> super ...
    compile: function (opts, ctx) ->
        return "#{@cur opts}_res += ((_ref = #{make_expression @contents, ctx}) !== undefined && _ref !== null ? _ref : '').toString();"

class NodeTag extends Node
    @tag = \__tag__
    (specs) -> super ...
    compile: ->
        throw new JinJSUnimplementedException "The NodeTag is not meant to be used !"

    toString: ->
        return "Node: #{this.constructor.displayName}"

/**
 *
 */
class NodeExtends extends NodeTag
    @tag = \extends

    (specs) -> super ...

    compile: function (opts, ctx) ->
        opts.'extends' = true
        tpl_name = parse_extends @contents, opts
        if template_expr_is_string tpl_name
            return "#{@cur opts}__extends__ = __get_template__ (#{tpl_name});"
        else
            return "#{@cur opts}__extends__ = #{tpl_name}; 
                #{@cur opts}if (__extends__ === null || __extends__ === undefined) throw new Error ('Cant extend a null template.');"

class NodeImport extends NodeTag
    @tag = \import
    (specs) -> super ...

    compile: (opts, ctx) ->
        { tpl, as, imports, with_context } = parse_import

        opts.\clone = true # We're going to need the clone function

        result = "#{@cur opts}(function(){ 
                #{@ind opts}var __new_ctx = #{if not with_context then '{}' else '__import({}, __ctx__)'};
                // __new_ctx now gets populated with the new exported variables.
                #{@cur opts}__get_template__(#{tpl}).render(__new_ctx);
            "

        if as # Importing the whole module.
            result += "#{common}#{@cur opts}__ctx__.#{as} = __new_ctx;
            "

        else # List of imported elements from the context.
            result += "#{@cur opts}var names = ['#{imports.join "', '"}'];
                #{@cur opts}for (var i = 0; i < names.length; i++) {
                    #{@ind opts}__ctx__[names[i]] = __new_ctx[names[i]];
                #{@ded opts}}
            "

            
        result += "#{@ded opts}})();"
        return result

class NodeFromImport extends NodeImport
    @tag = \from
    (specs) -> super ...

/**
 *
 */
class NodeInclude extends NodeTag
    @tag = \include

    (specs) -> super ...

    compile: function (opts, ctx) ->
        tpl_name = parse_extends @contents, opts

        if template_expr_is_string tpl_name
            tpl_exp = "__get_template__(#{tpl_name})"
        else
            tpl_exp = tpl_name

        return "#{@cur opts}_res += (#{tpl_exp}).render(__ctx__);"

class NodeImport extends NodeTag
    @tag = \import
    (specs) -> super ...

    compile: (opts, ctx) ->
        { template, as_name, variables, with_context } = parse_import @contents, ctx

        opts.\clone = true # We're going to need the clone function

        if template_expr_is_string template
            tpl_exp = "__get_template__(#{template})"
        else
            tpl_exp = template

        result = "#{@cur opts}(function(){ "

        if with_context
            result += "#{@ind opts}var __new_ctx = __import({}, __ctx__);
                // __new_ctx now gets populated with the new exported variables.
                #{@cur opts}(#{tpl_exp}).render(__new_ctx);
            "
        else
            result += "#{@cur opts}var __new_ctx = (#{tpl_exp})._cached_ctx();"

        if as_name # Importing the whole module.
            result += "#{@cur opts}__ctx__.#{as_name} = __new_ctx;
            "

        else # List of imported elements from the context.
            result += "#{@cur opts}var names = ['#{variables.join "', '"}'];
                #{@cur opts}for (var i = 0; i < names.length; i++) {
                    #{@ind opts}__ctx__[names[i]] = __new_ctx[names[i]];
                #{@ded opts}}
            "

            
        result += "#{@ded opts}})();"
        return result

class NodeFromImport extends NodeImport
    @tag = \from
    (specs) -> super ...

class NodeAbspath extends NodeTag
    @tag = \abspath
    (specs) -> super ...
    compile: function (opts, ctx) ->
        path = parse_string @contents, ctx
        return "#{@cur opts}_res += require('path').join(__dirname, #{path});"
/**
 *
 */
class NodeLet extends NodeTag
    @tag = \let

    (specs) -> super ...

    compile: function (opts, ctx) ->
        { variable_name, expression } = parse_let @contents, ctx

        ctx[variable_name] = true # The variable name is now accessible to the rest of the template.
        return res = "#{@cur opts}var #{variable_name} = (__ctx__.#{variable_name} = #{expression});"

class NodeDo extends NodeTag
    @tag = \do
    (specs) -> super ...

    compile: function (opts, ctx) ->
        return "#{@cur opts}#{make_expression @contents, ctx};"

/**
 */
class NodeTagContainer extends NodeList
    (specs) ->
        super ...
        @child_node = specs.child_node

    child_code: (opts, ctx) ->
        return (@child_node?.compile opts, ctx) ? ""

/**
 *
 */
class NodeMacro extends NodeTagContainer
    @tag = \macro
    @until = \endmacro

    (specs) -> super ...

    init_defaults: (opts, args) ->
        res = ""
        for a of args
            if a.default_value
                res += "#{@cur opts}#{a.name} = (#{a.name} === undefined) ? (#{a.default_value}) : #{a.name};"

    compile: (opts, ctx) ->
        { args, function_name } = parse_macro @contents, ctx

        ctx[function_name] = true # This macro is now accessible to all the template code that follows.
        new_ctx = {} <<< ctx

        for argname of args
            new_ctx[argname.name] = true

        res = "#{@cur opts}function #{function_name}(#{(a.name for a of args).join ", "}) {
                    #{@ind opts}var _res = '';
                    #{@init_defaults opts, args}
                    #{@child_code opts, new_ctx}
                    #{@cur opts}return _res;
                #{@ded opts}}
                #{@cur opts}__ctx__.#{function_name} = #{function_name};
                "
        return res

/**
 *
 */
class NodeBlock extends NodeTagContainer
    @tag = \block
    @until = \endblock

    (specs) -> super ...

    compile: (opts, ctx) ->
        block_name = parse_block @contents, ctx
        opts.blocks ?= {}

        new_ctx = {\_super : true} <<< ctx

        # Output the block expression into the block
        indent = opts.__indent__
        opts.__indent__ = 4
        opts.blocks[block_name] = "#{@cur opts}var _res = '';
                #{@child_code opts, new_ctx}
                #{@cur opts}return _res;"
        opts.__indent__ = indent

        return "#{@cur opts}// Adding the current block as the super of the currently defined block with the same name.
            #{@cur opts}if (_b['#{block_name}'] !== undefined) {
            #{@ind opts}(function (original) {
                #{@ind opts}_b['#{block_name}'] = function (__ctx__) { return original.call({ _super: __block_#{block_name}}, __ctx__); };
            #{@ded opts}})(_b['#{block_name}']);
        #{@ded opts}} else { _b['#{block_name}'] = __block_#{block_name}; }
        #{@cur opts}_res += _b['#{block_name}'](__ctx__);"



class NodeElse extends NodeTagContainer
    @tag = \else

    @parse = function (pd) ->
        return new NodeElse child_node: pd.child_node

    (specs) ->
        super ...

    compile: (opts, ctx) ->
        res = "#{@ded opts}} else {" 
        @ind opts
        res += "#{@child_code opts, ctx}"
        return res

class NodeElseIf extends NodeTagContainer
    @tag = \elseif
    @inside = elseif: NodeElseIf, else: NodeElse

    (specs) ->
        super ...

    compile: function (opts, ctx) ->
        if not trim @contents
            throw new Error "{% elseif <condition> %}: condition can't be empty."

        res = "#{@ded opts}} else if (#{make_expression @contents, ctx}) {"
        @ind opts
        res += "#{@child_code opts, ctx}"
        return res

class NodeIf extends NodeTagContainer
    @tag = \if
    @until = \endif
    @inside = else: NodeElse, elseif: NodeElseIf

    (specs) ->
        super ...

    compile: function (opts, ctx) ->
        if not trim @contents
            throw new Error "{% if <condition> %}: condition can't be empty."

        res = "#{@cur opts}if (#{make_expression @contents, ctx}) {"
        @ind opts
        res += "#{@child_code opts, ctx}#{super.call this, opts, ctx}
        #{@ded opts}}"
        return res


class NodeElseFor extends NodeTagContainer
    @tag = \else
    @until = \endfor

    @parse = function (pd) ->
        return new NodeElseFor child_node: pd.child_node
    
    (specs) ->
        super ...

    compile: function (opts, ctx) ->
        # loop.index is not defined if we didn't enter the loop.
        res = "#{@ded opts}if (loop.index === undefined) {"
        @ind opts
        res += "#{@child_code opts, ctx}#{@ded opts}}"
        return res


#   A Node that emulates the for () { } statement.
#  
class NodeFor extends NodeTagContainer
    @tag = \for
    @until = \endfor
    @inside = else: NodeElseFor

    (specs) ->
        super ...

    compile: function (opts, ctx) ->
        { key, value, condition } = parse_for @contents, ctx

        # We want to include the __for function
        opts.forblock = true

        value = '' if not value # Iterating over an array.

        return "#{@cur opts}__for(__ctx__, #{condition}, '#{key}', '#{value}', (function () {
                    #{@child_code opts, ctx}
                }), (function(){
                #{super.call this, opts, ctx}
            }) );"

exports <<< { 
    NodeIf, NodeDo, NodeLet, NodeFor, NodeMacro, NodeList, NodeBasic, 
    NodePrint, NodeComment, NodeExtends, NodeInclude, NodeImport, NodeFromImport
    default_nodes: do
        \if : NodeIf
        \do : NodeDo
        \let : NodeLet
        \for : NodeFor
        \macro : NodeMacro
        \extends : NodeExtends
        \block : NodeBlock
        \include : NodeInclude
        \from : NodeFromImport
        \import : NodeImport
        \abspath : NodeAbspath
    }

