var BasicFileEnvironment, ExpressEnvironment, __extends = function(sub, sup){
  function ctor(){} ctor.prototype = (sub.superclass = sup).prototype;
  return (sub.prototype = new ctor).constructor = sub;
};
BasicFileEnvironment = require('./environment').BasicFileEnvironment;
/**
 *  A compilation environment designed to be used with Express.
 */
ExpressEnvironment = (function(_super){
  /**
   *  Constructor.
   */
  var prototype = __extends(ExpressEnvironment, _super).prototype;
  function ExpressEnvironment(specs){
    ExpressEnvironment.superclass.apply(this, arguments);
    this.track_changes = specs.track_changes;
  } ExpressEnvironment.displayName = 'ExpressEnvironment';
  /**
   *  @param path: The path to monitor for changes.
   */
  prototype.trackFile = function(path){
    if (this.track_changes) {
      return ExpressEnvironment.superclass.prototype.trackFile.call(this, path);
    }
  };
  prototype.getTemplateFromString = function(str, ctx){
    var res;
    if (ctx.filename in this.cache) {
      return this.cache[ctx.filename];
    }
    res = ExpressEnvironment.superclass.prototype.getTemplateFromString.call(this, str, ctx);
    this.cache[ctx.filename] = res;
    return res;
  };
  return ExpressEnvironment;
}(BasicFileEnvironment));
/**
 *  Compile function used to integrate with Express.
 *
 *  @param str: The body of the template.
 *  @param options: Options passed to the parser by Express.
 *      The "jinjs_pre_compile" can contain a function that takes a (string)
 *         argument which transforms the source before passing it to jinjs.
 *      The "jinjs_track_changes" will force the Environment to cache the templates,
 *         even if the app is not in development mode. It will only work if Express
 *         has deactivated its own cache.
 *
 *  @return A function taking a context as parameter.
 */
function compile(str, options){
  var exports, _ref;
  if (options.jinjs_pre_compile) {
    str = options.jinjs_pre_compile(str);
  }
  (_ref = options.app.settings).jinjsenv == null && (_ref.jinjsenv = new ExpressEnvironment({
    track_changes: options.app.settings.env == 'development' || options.app.settings["view options"].jinjs_track_changes,
    pre_compile_func: options.jinjs_pre_compile
  }));
  exports = options.app.settings.jinjsenv.getTemplateFromString(str, options);
  return exports.render;
}
exports.compile = compile;