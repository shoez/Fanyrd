var nodes, NodeFactory, _nf;
nodes = require('./nodes');
NodeFactory = (function(){
  var prototype = NodeFactory.prototype;
  function NodeFactory(){
    this.nodes = {};
  } NodeFactory.displayName = 'NodeFactory';
  prototype.register = function(cls, builder){
    var name;
    name = cls.tag;
    return this.nodes[name] = {
      builder: builder,
      cls: cls,
      'until': cls['until']
    };
  };
  prototype.unregister = function(name){
    var _ref, _ref2;
    return _ref2 = (_ref = this.nodes)[name], delete _ref[name], _ref2;
  };
  return NodeFactory;
}());
exports.NodeFactory = NodeFactory;
_nf = new NodeFactory();
_nf.register(nodes.NodeIf, function(pd){
  return new nodes.NodeIf({
    child_node: pd.child_node,
    condition: pd.contents
  });
});
_nf.register(nodes.NodeElseIf, function(pd){
  return new nodes.NodeElseIf({
    child_node: pd.child_node,
    condition: pd.contents
  });
});
_nf.register(nodes.NodeElse, function(pd){
  return new nodes.NodeElse({
    child_node: pd.child_node
  });
});
_nf.register(nodes.NodeMacro, function(pd){
  return new nodes.NodeMacro({
    child_node: pd.child_node
  });
});
_nf.register(nodes.NodeDo, function(pd){});
_nf.register(nodes.NodeLet, function(pd){});
_nf.register(nodes.NodeFor, function(pd){
  return new nodes.NodeFor;
});
exports.default_node_factory = _nf;