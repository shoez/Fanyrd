var make_expression, make_parse_rule, parse_for, parse_let, parse_macro, parse_extends, parse_block, parse_import, parse_string, Node, NodeBasic, NodeComment, NodeList, NodePrint, NodeTag, NodeExtends, NodeImport, NodeFromImport, NodeInclude, NodeAbspath, NodeLet, NodeDo, NodeTagContainer, NodeMacro, NodeBlock, NodeElse, NodeElseIf, NodeIf, NodeElseFor, NodeFor, __repeatString = function(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}, __extends = function(sub, sup){
  function ctor(){} ctor.prototype = (sub.superclass = sup).prototype;
  return (sub.prototype = new ctor).constructor = sub;
}, __import = function(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
};
make_expression = require('./expression').parse;
make_parse_rule = function(rule_name){
  return function(contents, ctx){
    return make_expression(contents, rule_name, ctx);
  };
};
parse_for = make_parse_rule('tag_for');
parse_let = make_parse_rule('tag_let');
parse_macro = make_parse_rule('tag_macro');
parse_extends = make_expression;
parse_block = make_parse_rule('tag_block');
parse_import = make_parse_rule('tag_import');
parse_string = make_parse_rule('string');
function trim(string){
  return !string
    ? ""
    : string.replace(/^\s*|\s*$/, '');
}
/**
 *  @param str  a string
 *  @returns    an escaped string suitable to be quoted.
 */
function escape(str){
  return str.replace(/\\/g, '\\\\').replace(/["']/g, function(str){
    return "\\" + str;
  }).replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t');
}
function template_expr_is_string(expr){
  try {
    parse_string(expr);
    return true;
  } catch (e) {
    return false;
  }
}
/**
 *
 */
Node = (function(){
  var prototype = Node.prototype;
  function Node(specs){
    if (specs != null ? specs.contents : void 8) {
      this.contents = specs.contents;
    }
  } Node.displayName = 'Node';
  prototype.compile = function(){
    throw new Error("This function should never be called.");
  };
  prototype.ind = function(opts){
    var ind;
    opts.__indent__ == null && (opts.__indent__ = 0);
    opts.__indent__ = opts.__indent__ + 1;
    ind = opts.__indent__ * 4;
    return "\n" + __repeatString(" ", ind);
  };
  prototype.ded = function(opts){
    var ind;
    opts.__indent__ == null && (opts.__indent__ = 1);
    opts.__indent__ = opts.__indent__ - 1;
    ind = opts.__indent__ * 4;
    return "\n" + __repeatString(" ", ind);
  };
  prototype.cur = function(opts){
    var ind, _ref;
    ind = ((_ref = opts.__indent__) != null ? _ref : 0) * 4;
    return "\n" + __repeatString(" ", ind);
  };
  return Node;
}());
/**
 *
 */
NodeBasic = (function(_super){
  var prototype = __extends(NodeBasic, _super).prototype;
  function NodeBasic(specs){
    NodeBasic.superclass.apply(this, arguments);
  } NodeBasic.displayName = 'NodeBasic';
  prototype.compile = (function(){
    function compile(opts, ctx){
      return this.cur(opts) + "_res += '" + escape(this.contents) + "';";
    }
    return compile;
  }());
  prototype.append = (function(){
    function append(contents){
      return this.contents += contents;
    }
    return append;
  }());
  return NodeBasic;
}(Node));
NodeComment = (function(_super){
  var prototype = __extends(NodeComment, _super).prototype;
  function NodeComment(specs){
    var _ref;
    this.contents = (_ref = specs.contents) != null ? _ref : "";
  } NodeComment.displayName = 'NodeComment';
  prototype.compile = (function(){
    function compile(opts, ctx){
      return this.cur(opts) + "/*" + this.contents + "*/";
    }
    return compile;
  }());
  return NodeComment;
}(Node));
/**
 *  A collection of Nodes.
 */
NodeList = (function(_super){
  var prototype = __extends(NodeList, _super).prototype;
  function NodeList(specs){
    this.nodes = [];
    NodeList.superclass.apply(this, arguments);
  } NodeList.displayName = 'NodeList';
  prototype.push = (function(){
    function push(node){
      var last_node;
      if (node == null) {
        return;
      }
      if (typeof node == 'string') {
        last_node = this.nodes[this.nodes.length - 1];
        if (last_node instanceof NodeBasic) {
          return last_node.append(node);
        } else {
          return this.nodes.push(new NodeBasic({
            contents: node
          }));
        }
      } else {
        return this.nodes.push(node);
      }
    }
    return push;
  }());
  prototype.compile = (function(){
    function compile(opts, ctx){
      var res, node, _i, _ref, _len;
      ctx == null && (ctx = {});
      res = "";
      for (_i = 0, _len = (_ref = this.nodes).length; _i < _len; ++_i) {
        node = _ref[_i];
        res += node.compile(opts, ctx);
      }
      return res;
    }
    return compile;
  }());
  return NodeList;
}(Node));
/**
 *
 */
NodePrint = (function(_super){
  var prototype = __extends(NodePrint, _super).prototype;
  function NodePrint(specs){
    NodePrint.superclass.apply(this, arguments);
  } NodePrint.displayName = 'NodePrint';
  prototype.compile = (function(){
    function compile(opts, ctx){
      return this.cur(opts) + "_res += ((_ref = " + make_expression(this.contents, ctx) + ") !== undefined && _ref !== null ? _ref : '').toString();";
    }
    return compile;
  }());
  return NodePrint;
}(Node));
NodeTag = (function(_super){
  var prototype = __extends(NodeTag, _super).prototype;
  NodeTag.tag = '__tag__';
  function NodeTag(specs){
    NodeTag.superclass.apply(this, arguments);
  } NodeTag.displayName = 'NodeTag';
  prototype.compile = function(){
    throw new JinJSUnimplementedException("The NodeTag is not meant to be used !");
  };
  prototype.toString = function(){
    return "Node: " + this.constructor.displayName;
  };
  return NodeTag;
}(Node));
/**
 *
 */
NodeExtends = (function(_super){
  var prototype = __extends(NodeExtends, _super).prototype;
  NodeExtends.tag = 'extends';
  function NodeExtends(specs){
    NodeExtends.superclass.apply(this, arguments);
  } NodeExtends.displayName = 'NodeExtends';
  prototype.compile = (function(){
    function compile(opts, ctx){
      var tpl_name;
      opts['extends'] = true;
      tpl_name = parse_extends(this.contents, opts);
      if (template_expr_is_string(tpl_name)) {
        return this.cur(opts) + "__extends__ = __get_template__ (" + tpl_name + ");";
      } else {
        return this.cur(opts) + "__extends__ = " + tpl_name + "; " + this.cur(opts) + "if (__extends__ === null || __extends__ === undefined) throw new Error ('Cant extend a null template.');";
      }
    }
    return compile;
  }());
  return NodeExtends;
}(NodeTag));
NodeImport = (function(_super){
  var prototype = __extends(NodeImport, _super).prototype;
  NodeImport.tag = 'import';
  function NodeImport(specs){
    NodeImport.superclass.apply(this, arguments);
  } NodeImport.displayName = 'NodeImport';
  prototype.compile = function(opts, ctx){
    var tpl, as, imports, with_context, result;
    tpl = parse_import.tpl, as = parse_import.as, imports = parse_import.imports, with_context = parse_import.with_context;
    opts['clone'] = true;
    result = this.cur(opts) + "(function(){ " + this.ind(opts) + "var __new_ctx = " + (!with_context ? '{}' : '__import({}, __ctx__)') + ";// __new_ctx now gets populated with the new exported variables." + this.cur(opts) + "__get_template__(" + tpl + ").render(__new_ctx);";
    if (as) {
      result += common + "" + this.cur(opts) + "__ctx__." + as + " = __new_ctx;";
    } else {
      result += this.cur(opts) + "var names = ['" + imports.join("', '") + "'];" + this.cur(opts) + "for (var i = 0; i < names.length; i++) {" + this.ind(opts) + "__ctx__[names[i]] = __new_ctx[names[i]];" + this.ded(opts) + "}";
    }
    result += this.ded(opts) + "})();";
    return result;
  };
  return NodeImport;
}(NodeTag));
NodeFromImport = (function(_super){
  var prototype = __extends(NodeFromImport, _super).prototype;
  NodeFromImport.tag = 'from';
  function NodeFromImport(specs){
    NodeFromImport.superclass.apply(this, arguments);
  } NodeFromImport.displayName = 'NodeFromImport';
  return NodeFromImport;
}(NodeImport));
/**
 *
 */
NodeInclude = (function(_super){
  var prototype = __extends(NodeInclude, _super).prototype;
  NodeInclude.tag = 'include';
  function NodeInclude(specs){
    NodeInclude.superclass.apply(this, arguments);
  } NodeInclude.displayName = 'NodeInclude';
  prototype.compile = (function(){
    function compile(opts, ctx){
      var tpl_name, tpl_exp;
      tpl_name = parse_extends(this.contents, opts);
      if (template_expr_is_string(tpl_name)) {
        tpl_exp = "__get_template__(" + tpl_name + ")";
      } else {
        tpl_exp = tpl_name;
      }
      return this.cur(opts) + "_res += (" + tpl_exp + ").render(__ctx__);";
    }
    return compile;
  }());
  return NodeInclude;
}(NodeTag));
NodeImport = (function(_super){
  var prototype = __extends(NodeImport, _super).prototype;
  NodeImport.tag = 'import';
  function NodeImport(specs){
    NodeImport.superclass.apply(this, arguments);
  } NodeImport.displayName = 'NodeImport';
  prototype.compile = function(opts, ctx){
    var template, as_name, variables, with_context, tpl_exp, result, _ref;
    _ref = parse_import(this.contents, ctx), template = _ref.template, as_name = _ref.as_name, variables = _ref.variables, with_context = _ref.with_context;
    opts['clone'] = true;
    if (template_expr_is_string(template)) {
      tpl_exp = "__get_template__(" + template + ")";
    } else {
      tpl_exp = template;
    }
    result = this.cur(opts) + "(function(){ ";
    if (with_context) {
      result += this.ind(opts) + "var __new_ctx = __import({}, __ctx__);// __new_ctx now gets populated with the new exported variables." + this.cur(opts) + "(" + tpl_exp + ").render(__new_ctx);";
    } else {
      result += this.cur(opts) + "var __new_ctx = (" + tpl_exp + ")._cached_ctx();";
    }
    if (as_name) {
      result += this.cur(opts) + "__ctx__." + as_name + " = __new_ctx;";
    } else {
      result += this.cur(opts) + "var names = ['" + variables.join("', '") + "'];" + this.cur(opts) + "for (var i = 0; i < names.length; i++) {" + this.ind(opts) + "__ctx__[names[i]] = __new_ctx[names[i]];" + this.ded(opts) + "}";
    }
    result += this.ded(opts) + "})();";
    return result;
  };
  return NodeImport;
}(NodeTag));
NodeFromImport = (function(_super){
  var prototype = __extends(NodeFromImport, _super).prototype;
  NodeFromImport.tag = 'from';
  function NodeFromImport(specs){
    NodeFromImport.superclass.apply(this, arguments);
  } NodeFromImport.displayName = 'NodeFromImport';
  return NodeFromImport;
}(NodeImport));
NodeAbspath = (function(_super){
  var prototype = __extends(NodeAbspath, _super).prototype;
  NodeAbspath.tag = 'abspath';
  function NodeAbspath(specs){
    NodeAbspath.superclass.apply(this, arguments);
  } NodeAbspath.displayName = 'NodeAbspath';
  prototype.compile = (function(){
    function compile(opts, ctx){
      var path;
      path = parse_string(this.contents, ctx);
      return this.cur(opts) + "_res += require('path').join(__dirname, " + path + ");";
    }
    return compile;
  }());
  return NodeAbspath;
}(NodeTag));
/**
 *
 */
NodeLet = (function(_super){
  var prototype = __extends(NodeLet, _super).prototype;
  NodeLet.tag = 'let';
  function NodeLet(specs){
    NodeLet.superclass.apply(this, arguments);
  } NodeLet.displayName = 'NodeLet';
  prototype.compile = (function(){
    function compile(opts, ctx){
      var variable_name, expression, res, _ref;
      _ref = parse_let(this.contents, ctx), variable_name = _ref.variable_name, expression = _ref.expression;
      ctx[variable_name] = true;
      return res = this.cur(opts) + "var " + variable_name + " = (__ctx__." + variable_name + " = " + expression + ");";
    }
    return compile;
  }());
  return NodeLet;
}(NodeTag));
NodeDo = (function(_super){
  var prototype = __extends(NodeDo, _super).prototype;
  NodeDo.tag = 'do';
  function NodeDo(specs){
    NodeDo.superclass.apply(this, arguments);
  } NodeDo.displayName = 'NodeDo';
  prototype.compile = (function(){
    function compile(opts, ctx){
      return this.cur(opts) + "" + make_expression(this.contents, ctx) + ";";
    }
    return compile;
  }());
  return NodeDo;
}(NodeTag));
/**
 */
NodeTagContainer = (function(_super){
  var prototype = __extends(NodeTagContainer, _super).prototype;
  function NodeTagContainer(specs){
    NodeTagContainer.superclass.apply(this, arguments);
    this.child_node = specs.child_node;
  } NodeTagContainer.displayName = 'NodeTagContainer';
  prototype.child_code = function(opts, ctx){
    var _ref;
    return (_ref = (_ref = this.child_node) != null ? _ref.compile(opts, ctx) : void 8) != null ? _ref : "";
  };
  return NodeTagContainer;
}(NodeList));
/**
 *
 */
NodeMacro = (function(_super){
  var prototype = __extends(NodeMacro, _super).prototype;
  NodeMacro.tag = 'macro';
  NodeMacro.until = 'endmacro';
  function NodeMacro(specs){
    NodeMacro.superclass.apply(this, arguments);
  } NodeMacro.displayName = 'NodeMacro';
  prototype.init_defaults = function(opts, args){
    var res, a, _i, _len, _results = [];
    res = "";
    for (_i = 0, _len = args.length; _i < _len; ++_i) {
      a = args[_i];
      if (a.default_value) {
        _results.push(res += this.cur(opts) + "" + a.name + " = (" + a.name + " === undefined) ? (" + a.default_value + ") : " + a.name + ";");
      }
    }
    return _results;
  };
  prototype.compile = function(opts, ctx){
    var args, function_name, new_ctx, argname, a, res, _ref, _i, _len;
    _ref = parse_macro(this.contents, ctx), args = _ref.args, function_name = _ref.function_name;
    ctx[function_name] = true;
    new_ctx = __import({}, ctx);
    for (_i = 0, _len = args.length; _i < _len; ++_i) {
      argname = args[_i];
      new_ctx[argname.name] = true;
    }
    res = this.cur(opts) + "function " + function_name + "(" + (function(){
      var _i, _ref, _len, _results = [];
      for (_i = 0, _len = (_ref = args).length; _i < _len; ++_i) {
        a = _ref[_i];
        _results.push(a.name);
      }
      return _results;
    }()).join(", ") + ") {" + this.ind(opts) + "var _res = '';" + this.init_defaults(opts, args) + "" + this.child_code(opts, new_ctx) + "" + this.cur(opts) + "return _res;" + this.ded(opts) + "}" + this.cur(opts) + "__ctx__." + function_name + " = " + function_name + ";";
    return res;
  };
  return NodeMacro;
}(NodeTagContainer));
/**
 *
 */
NodeBlock = (function(_super){
  var prototype = __extends(NodeBlock, _super).prototype;
  NodeBlock.tag = 'block';
  NodeBlock.until = 'endblock';
  function NodeBlock(specs){
    NodeBlock.superclass.apply(this, arguments);
  } NodeBlock.displayName = 'NodeBlock';
  prototype.compile = function(opts, ctx){
    var block_name, new_ctx, indent;
    block_name = parse_block(this.contents, ctx);
    opts.blocks == null && (opts.blocks = {});
    new_ctx = __import({
      '_super': true
    }, ctx);
    indent = opts.__indent__;
    opts.__indent__ = 4;
    opts.blocks[block_name] = this.cur(opts) + "var _res = '';" + this.child_code(opts, new_ctx) + "" + this.cur(opts) + "return _res;";
    opts.__indent__ = indent;
    return this.cur(opts) + "// Adding the current block as the super of the currently defined block with the same name." + this.cur(opts) + "if (_b['" + block_name + "'] !== undefined) {" + this.ind(opts) + "(function (original) {" + this.ind(opts) + "_b['" + block_name + "'] = function (__ctx__) { return original.call({ _super: __block_" + block_name + "}, __ctx__); };" + this.ded(opts) + "})(_b['" + block_name + "']);" + this.ded(opts) + "} else { _b['" + block_name + "'] = __block_" + block_name + "; }" + this.cur(opts) + "_res += _b['" + block_name + "'](__ctx__);";
  };
  return NodeBlock;
}(NodeTagContainer));
NodeElse = (function(_super){
  var prototype = __extends(NodeElse, _super).prototype;
  NodeElse.tag = 'else';
  NodeElse.parse = (function(){
    function parse(pd){
      return new NodeElse({
        child_node: pd.child_node
      });
    }
    return parse;
  }());
  function NodeElse(specs){
    NodeElse.superclass.apply(this, arguments);
  } NodeElse.displayName = 'NodeElse';
  prototype.compile = function(opts, ctx){
    var res;
    res = this.ded(opts) + "} else {";
    this.ind(opts);
    res += this.child_code(opts, ctx) + "";
    return res;
  };
  return NodeElse;
}(NodeTagContainer));
NodeElseIf = (function(_super){
  var prototype = __extends(NodeElseIf, _super).prototype;
  NodeElseIf.tag = 'elseif';
  NodeElseIf.inside = {
    elseif: NodeElseIf,
    'else': NodeElse
  };
  function NodeElseIf(specs){
    NodeElseIf.superclass.apply(this, arguments);
  } NodeElseIf.displayName = 'NodeElseIf';
  prototype.compile = (function(){
    function compile(opts, ctx){
      var res;
      if (!trim(this.contents)) {
        throw new Error("{% elseif <condition> %}: condition can't be empty.");
      }
      res = this.ded(opts) + "} else if (" + make_expression(this.contents, ctx) + ") {";
      this.ind(opts);
      res += this.child_code(opts, ctx) + "";
      return res;
    }
    return compile;
  }());
  return NodeElseIf;
}(NodeTagContainer));
NodeIf = (function(_super){
  var prototype = __extends(NodeIf, _super).prototype;
  NodeIf.tag = 'if';
  NodeIf.until = 'endif';
  NodeIf.inside = {
    'else': NodeElse,
    elseif: NodeElseIf
  };
  function NodeIf(specs){
    NodeIf.superclass.apply(this, arguments);
  } NodeIf.displayName = 'NodeIf';
  prototype.compile = (function(){
    function compile(opts, ctx){
      var res;
      if (!trim(this.contents)) {
        throw new Error("{% if <condition> %}: condition can't be empty.");
      }
      res = this.cur(opts) + "if (" + make_expression(this.contents, ctx) + ") {";
      this.ind(opts);
      res += this.child_code(opts, ctx) + "" + NodeIf.superclass.prototype.compile.call(this, opts, ctx) + "" + this.ded(opts) + "}";
      return res;
    }
    return compile;
  }());
  return NodeIf;
}(NodeTagContainer));
NodeElseFor = (function(_super){
  var prototype = __extends(NodeElseFor, _super).prototype;
  NodeElseFor.tag = 'else';
  NodeElseFor.until = 'endfor';
  NodeElseFor.parse = (function(){
    function parse(pd){
      return new NodeElseFor({
        child_node: pd.child_node
      });
    }
    return parse;
  }());
  function NodeElseFor(specs){
    NodeElseFor.superclass.apply(this, arguments);
  } NodeElseFor.displayName = 'NodeElseFor';
  prototype.compile = (function(){
    function compile(opts, ctx){
      var res;
      res = this.ded(opts) + "if (loop.index === undefined) {";
      this.ind(opts);
      res += this.child_code(opts, ctx) + "" + this.ded(opts) + "}";
      return res;
    }
    return compile;
  }());
  return NodeElseFor;
}(NodeTagContainer));
NodeFor = (function(_super){
  var prototype = __extends(NodeFor, _super).prototype;
  NodeFor.tag = 'for';
  NodeFor.until = 'endfor';
  NodeFor.inside = {
    'else': NodeElseFor
  };
  function NodeFor(specs){
    NodeFor.superclass.apply(this, arguments);
  } NodeFor.displayName = 'NodeFor';
  prototype.compile = (function(){
    function compile(opts, ctx){
      var key, value, condition, _ref;
      _ref = parse_for(this.contents, ctx), key = _ref.key, value = _ref.value, condition = _ref.condition;
      opts.forblock = true;
      if (!value) {
        value = '';
      }
      return this.cur(opts) + "__for(__ctx__, " + condition + ", '" + key + "', '" + value + "', (function () {" + this.child_code(opts, ctx) + "}), (function(){" + NodeFor.superclass.prototype.compile.call(this, opts, ctx) + "}) );";
    }
    return compile;
  }());
  return NodeFor;
}(NodeTagContainer));
exports.NodeIf = NodeIf;
exports.NodeDo = NodeDo;
exports.NodeLet = NodeLet;
exports.NodeFor = NodeFor;
exports.NodeMacro = NodeMacro;
exports.NodeList = NodeList;
exports.NodeBasic = NodeBasic;
exports.NodePrint = NodePrint;
exports.NodeComment = NodeComment;
exports.NodeExtends = NodeExtends;
exports.NodeInclude = NodeInclude;
exports.NodeImport = NodeImport;
exports.NodeFromImport = NodeFromImport;
exports.default_nodes = {
  'if': NodeIf,
  'do': NodeDo,
  'let': NodeLet,
  'for': NodeFor,
  'macro': NodeMacro,
  'extends': NodeExtends,
  'block': NodeBlock,
  'include': NodeInclude,
  'from': NodeFromImport,
  'import': NodeImport,
  'abspath': NodeAbspath
};