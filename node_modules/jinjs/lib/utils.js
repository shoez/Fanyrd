var _ref, __indexOf;
function __for(__ctx__, condition, keyname, valuename, childcode, elsenode){
  var i, x, loop, _ref, _prev_loop, _prev_key, _prev_value, _to;
  i = 0;
  _ref = null;
  _prev_loop = __ctx__.loop;
  _prev_key = __ctx__[keyname];
  _prev_value = null;
  x = null;
  loop = null;
  if (!valuename) {
    _ref = condition || [];
    loop = __ctx__.loop = {
      length: _ref.length,
      callee: arguments.callee
    };
    for (i = 0, _to = loop.length - 1; i <= _to; ++i) {
      loop.index = i + 1;
      loop.index0 = i;
      loop.first = i == 0;
      loop.last = i == loop.length - 1;
      __ctx__[keyname] = _ref[i];
      if (childcode != null) {
        childcode();
      }
    }
  } else {
    _ref = condition != null
      ? condition
      : {};
    x = '';
    i = 0;
    _prev_value = __ctx__[valuename];
    loop = __ctx__.loop = {
      callee: arguments.callee
    };
    for (x in _ref) {
      if (_ref.hasOwnProperty(x)) {
        loop.index0 = i;
        loop.index = i + 1;
        __ctx__[keyname] = x;
        __ctx__[valuename] = _ref[x];
        if (childcode != null) {
          childcode();
        }
        i += 1;
      }
    }
    __ctx__[valuename] = _prev_value;
  }
  if (elsenode != null) {
    elsenode();
  }
  __ctx__.loop = _prev_loop;
  return __ctx__[keyname] = _prev_key;
}
function __in(obj, container){
  if (obj instanceof Array) {
    return __indexOf.call(container, obj) > -1;
  }
  return container[obj] != null;
}
__indexOf = (_ref = [].indexOf) != null
  ? _ref
  : function(x){
    var i;
    for (i = this.length - 1; i <= 0; ++i) {
      if (this[i] === x) {
        return i;
      }
    }
  };
function __import(obj, src){
  var own, key;
  own = {}.hasOwnProperty;
  for (key in src) {
    if (own.call(src, key)) {
      obj[key] = src[key];
    }
  }
  return obj;
}
exports.__in = __in;
exports.__for = __for;
exports.__import = __import;
exports.__indexOf = __indexOf;