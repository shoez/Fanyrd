module.exports = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "ASSIGN": parse_ASSIGN,
        "BINARY_OPERATOR": parse_BINARY_OPERATOR,
        "COLON": parse_COLON,
        "COMMA": parse_COMMA,
        "DOT": parse_DOT,
        "IN": parse_IN,
        "LBRACE": parse_LBRACE,
        "LBRACKET": parse_LBRACKET,
        "LPAREN": parse_LPAREN,
        "NEW": parse_NEW,
        "PIPE": parse_PIPE,
        "POST_UNARY_OPERATOR": parse_POST_UNARY_OPERATOR,
        "QUESTION_MARK": parse_QUESTION_MARK,
        "RBRACE": parse_RBRACE,
        "RBRACKET": parse_RBRACKET,
        "RPAREN": parse_RPAREN,
        "SPECIAL": parse_SPECIAL,
        "TEXT_BINARY_OPERATOR": parse_TEXT_BINARY_OPERATOR,
        "UNARY_OPERATOR": parse_UNARY_OPERATOR,
        "array_index": parse_array_index,
        "array_indexing_rec": parse_array_indexing_rec,
        "array_literal": parse_array_literal,
        "binary": parse_binary,
        "call_arguments": parse_call_arguments,
        "double_quoted_contents": parse_double_quoted_contents,
        "double_quoted_terminal": parse_double_quoted_terminal,
        "expression": parse_expression,
        "filter_expression": parse_filter_expression,
        "filter_identifier": parse_filter_identifier,
        "filter_literal": parse_filter_literal,
        "filter_name": parse_filter_name,
        "filter_rec": parse_filter_rec,
        "function_call": parse_function_call,
        "function_call_rec": parse_function_call_rec,
        "ic_member_expression": parse_ic_member_expression,
        "ic_member_expression_rec": parse_ic_member_expression_rec,
        "ic_primary_expression": parse_ic_primary_expression,
        "identifier": parse_identifier,
        "macro_argument": parse_macro_argument,
        "macro_call_arguments": parse_macro_call_arguments,
        "member_expression": parse_member_expression,
        "number": parse_number,
        "object_argument": parse_object_argument,
        "object_arguments": parse_object_arguments,
        "object_literal": parse_object_literal,
        "ooc_primary_expression": parse_ooc_primary_expression,
        "operation": parse_operation,
        "post_unary": parse_post_unary,
        "primary_expression": parse_primary_expression,
        "primary_identifier": parse_primary_identifier,
        "regexp": parse_regexp,
        "regexp_contents": parse_regexp_contents,
        "regexp_terminal": parse_regexp_terminal,
        "single_quoted_contents": parse_single_quoted_contents,
        "single_quoted_terminal": parse_single_quoted_terminal,
        "space": parse_space,
        "special_value": parse_special_value,
        "string": parse_string,
        "tag_block": parse_tag_block,
        "tag_for": parse_tag_for,
        "tag_import": parse_tag_import,
        "tag_let": parse_tag_let,
        "tag_macro": parse_tag_macro,
        "ternary_operator": parse_ternary_operator,
        "unary": parse_unary,
        "variable_list": parse_variable_list
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "expression";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_expression() {
        var cacheKey = 'expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result10 = parse_space();
        var result6 = result10 !== null ? result10 : '';
        if (result6 !== null) {
          var result7 = parse_ternary_operator();
          if (result7 !== null) {
            var result9 = parse_space();
            var result8 = result9 !== null ? result9 : '';
            if (result8 !== null) {
              var result5 = [result6, result7, result8];
            } else {
              var result5 = null;
              pos = savedPos0;
            }
          } else {
            var result5 = null;
            pos = savedPos0;
          }
        } else {
          var result5 = null;
          pos = savedPos0;
        }
        var result4 = result5 !== null
          ? (function(t) {
            return t;
          })(result5[1])
          : null;
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_space();
          var result2 = result3 !== null ? result3 : '';
          var result1 = result2 !== null
            ? (function() {
              return '';
            })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ternary_operator() {
        var cacheKey = 'ternary_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_operation();
        if (result4 !== null) {
          var result5 = parse_QUESTION_MARK();
          if (result5 !== null) {
            var result6 = parse_ternary_operator();
            if (result6 !== null) {
              var result7 = parse_COLON();
              if (result7 !== null) {
                var result8 = parse_ternary_operator();
                if (result8 !== null) {
                  var result3 = [result4, result5, result6, result7, result8];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(p, e1, e2) {
            return "(" + p + " ? " + e1 + " : " + e2 + ")";
          })(result3[0], result3[2], result3[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_operation();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_operation() {
        var cacheKey = 'operation@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var result18 = parse_unary();
        if (result18 !== null) {
          var result19 = parse_expression();
          if (result19 !== null) {
            var result17 = [result18, result19];
          } else {
            var result17 = null;
            pos = savedPos3;
          }
        } else {
          var result17 = null;
          pos = savedPos3;
        }
        var result16 = result17 !== null
          ? (function(u, p) {
            return u + "" + p;
          })(result17[0], result17[1])
          : null;
        if (result16 !== null) {
          var result0 = result16;
        } else {
          var savedPos2 = pos;
          var result13 = parse_filter_expression();
          if (result13 !== null) {
            var result14 = parse_binary();
            if (result14 !== null) {
              var result15 = parse_operation();
              if (result15 !== null) {
                var result12 = [result13, result14, result15];
              } else {
                var result12 = null;
                pos = savedPos2;
              }
            } else {
              var result12 = null;
              pos = savedPos2;
            }
          } else {
            var result12 = null;
            pos = savedPos2;
          }
          var result11 = result12 !== null
            ? (function(p, o, s) {
              return p + "" + o + s;
            })(result12[0], result12[1], result12[2])
            : null;
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var savedPos1 = pos;
            var result8 = parse_filter_expression();
            if (result8 !== null) {
              var result9 = parse_IN();
              if (result9 !== null) {
                var result10 = parse_operation();
                if (result10 !== null) {
                  var result7 = [result8, result9, result10];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
            var result6 = result7 !== null
              ? (function(p, s) {
                return "__in(" + p + ", " + s + ")";
              })(result7[0], result7[2])
              : null;
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var savedPos0 = pos;
              var result4 = parse_filter_expression();
              if (result4 !== null) {
                var result5 = parse_post_unary();
                if (result5 !== null) {
                  var result3 = [result4, result5];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
              var result2 = result3 !== null
                ? (function(p, o) {
                  return p + "" + o;
                })(result3[0], result3[1])
                : null;
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_filter_expression();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_filter_expression() {
        var cacheKey = 'filter_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_member_expression();
        if (result4 !== null) {
          var result5 = parse_filter_rec();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(expr, f) {
            return make_filter(expr, f);
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_member_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_filter_rec() {
        var cacheKey = 'filter_rec@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_filter_literal();
        if (result4 !== null) {
          var result5 = parse_filter_rec();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(lit, r) {
            return [].concat(lit, r);
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_filter_literal();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_filter_literal() {
        var cacheKey = 'filter_literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result7 = parse_PIPE();
        if (result7 !== null) {
          var result8 = parse_filter_name();
          if (result8 !== null) {
            var result9 = parse_LPAREN();
            if (result9 !== null) {
              var result12 = parse_call_arguments();
              var result10 = result12 !== null ? result12 : '';
              if (result10 !== null) {
                var result11 = parse_RPAREN();
                if (result11 !== null) {
                  var result6 = [result7, result8, result9, result10, result11];
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
          } else {
            var result6 = null;
            pos = savedPos1;
          }
        } else {
          var result6 = null;
          pos = savedPos1;
        }
        var result5 = result6 !== null
          ? (function(name, args) {
            return [{
            name: name,
            args: args
          }];
          })(result6[1], result6[3])
          : null;
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result3 = parse_PIPE();
          if (result3 !== null) {
            var result4 = parse_filter_name();
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(name) {
              return [{
              name: name
            }];
            })(result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_call_arguments() {
        var cacheKey = 'call_arguments@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_expression();
        if (result4 !== null) {
          var result5 = parse_COMMA();
          if (result5 !== null) {
            var result6 = parse_call_arguments();
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(e, c) {
            return e + ", " + c;
          })(result3[0], result3[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_call() {
        var cacheKey = 'function_call@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_LPAREN();
        if (result2 !== null) {
          var result5 = parse_call_arguments();
          var result3 = result5 !== null ? result5 : '';
          if (result3 !== null) {
            var result4 = parse_RPAREN();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(args) {
            return "(" + args + ")";
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_call_rec() {
        var cacheKey = 'function_call_rec@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result13 = parse_function_call();
        if (result13 !== null) {
          var result14 = parse_function_call_rec();
          if (result14 !== null) {
            var result12 = [result13, result14];
          } else {
            var result12 = null;
            pos = savedPos2;
          }
        } else {
          var result12 = null;
          pos = savedPos2;
        }
        var result11 = result12 !== null
          ? (function(f, rec) {
            return f + rec;
          })(result12[0], result12[1])
          : null;
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos1 = pos;
          var result8 = parse_function_call();
          if (result8 !== null) {
            var result9 = parse_DOT();
            if (result9 !== null) {
              var result10 = parse_ic_member_expression_rec();
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(f, member) {
              return f + "." + member;
            })(result7[0], result7[2])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var result4 = parse_function_call();
            if (result4 !== null) {
              var result5 = parse_array_indexing_rec();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
            var result2 = result3 !== null
              ? (function(f, a) {
                return f + a;
              })(result3[0], result3[1])
              : null;
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_function_call();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_array_index() {
        var cacheKey = 'array_index@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_LBRACKET();
        if (result2 !== null) {
          var result3 = parse_call_arguments();
          if (result3 !== null) {
            var result4 = parse_RBRACKET();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(contents) {
            return "[" + contents + "]";
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_array_indexing_rec() {
        var cacheKey = 'array_indexing_rec@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result13 = parse_array_index();
        if (result13 !== null) {
          var result14 = parse_array_indexing_rec();
          if (result14 !== null) {
            var result12 = [result13, result14];
          } else {
            var result12 = null;
            pos = savedPos2;
          }
        } else {
          var result12 = null;
          pos = savedPos2;
        }
        var result11 = result12 !== null
          ? (function(a, rec) {
            return a + rec;
          })(result12[0], result12[1])
          : null;
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos1 = pos;
          var result8 = parse_array_index();
          if (result8 !== null) {
            var result9 = parse_DOT();
            if (result9 !== null) {
              var result10 = parse_ic_member_expression_rec();
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(a, member) {
              return a + "." + member;
            })(result7[0], result7[2])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var result4 = parse_array_index();
            if (result4 !== null) {
              var result5 = parse_function_call_rec();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
            var result2 = result3 !== null
              ? (function(a, f) {
                return a + f;
              })(result3[0], result3[1])
              : null;
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_array_index();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_member_expression() {
        var cacheKey = 'member_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result12 = parse_ooc_primary_expression();
        if (result12 !== null) {
          var result13 = parse_DOT();
          if (result13 !== null) {
            var result14 = parse_ic_member_expression_rec();
            if (result14 !== null) {
              var result11 = [result12, result13, result14];
            } else {
              var result11 = null;
              pos = savedPos2;
            }
          } else {
            var result11 = null;
            pos = savedPos2;
          }
        } else {
          var result11 = null;
          pos = savedPos2;
        }
        var result10 = result11 !== null
          ? (function(p, i) {
            return p + "." + i;
          })(result11[0], result11[2])
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos1 = pos;
          var result8 = parse_ooc_primary_expression();
          if (result8 !== null) {
            var result9 = parse_array_indexing_rec();
            if (result9 !== null) {
              var result7 = [result8, result9];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(p, arr) {
              return p + "" + arr;
            })(result7[0], result7[1])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var result4 = parse_ooc_primary_expression();
            if (result4 !== null) {
              var result5 = parse_function_call_rec();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
            var result2 = result3 !== null
              ? (function(expr, f) {
                return expr + "" + f;
              })(result3[0], result3[1])
              : null;
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_ooc_primary_expression();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ooc_primary_expression() {
        var cacheKey = 'ooc_primary_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_primary_expression();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_primary_identifier();
          var result1 = result2 !== null
            ? (function(i) {
              return i;
            })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ic_member_expression_rec() {
        var cacheKey = 'ic_member_expression_rec@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_ic_member_expression();
        if (result4 !== null) {
          var result5 = parse_DOT();
          if (result5 !== null) {
            var result6 = parse_ic_member_expression_rec();
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(xp, rec) {
            return xp + "" + rec;
          })(result3[0], result3[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_ic_member_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ic_member_expression() {
        var cacheKey = 'ic_member_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result12 = parse_ic_primary_expression();
        if (result12 !== null) {
          var result13 = parse_DOT();
          if (result13 !== null) {
            var result14 = parse_ic_member_expression();
            if (result14 !== null) {
              var result11 = [result12, result13, result14];
            } else {
              var result11 = null;
              pos = savedPos2;
            }
          } else {
            var result11 = null;
            pos = savedPos2;
          }
        } else {
          var result11 = null;
          pos = savedPos2;
        }
        var result10 = result11 !== null
          ? (function(p, i) {
            return p + "." + i;
          })(result11[0], result11[2])
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos1 = pos;
          var result8 = parse_ic_primary_expression();
          if (result8 !== null) {
            var result9 = parse_array_indexing_rec();
            if (result9 !== null) {
              var result7 = [result8, result9];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(p, arr) {
              return p + "" + arr;
            })(result7[0], result7[1])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var result4 = parse_ic_primary_expression();
            if (result4 !== null) {
              var result5 = parse_function_call_rec();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
            var result2 = result3 !== null
              ? (function(expr, f) {
                return expr + "" + f;
              })(result3[0], result3[1])
              : null;
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_ic_primary_expression();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ic_primary_expression() {
        var cacheKey = 'ic_primary_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_primary_expression();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_identifier();
          var result1 = result2 !== null
            ? (function(i) {
              return i;
            })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primary_expression() {
        var cacheKey = 'primary_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result11 = parse_special_value();
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var result10 = parse_object_literal();
          if (result10 !== null) {
            var result0 = result10;
          } else {
            var result9 = parse_array_literal();
            if (result9 !== null) {
              var result0 = result9;
            } else {
              var result8 = parse_number();
              if (result8 !== null) {
                var result0 = result8;
              } else {
                var result7 = parse_string();
                if (result7 !== null) {
                  var result0 = result7;
                } else {
                  var result6 = parse_regexp();
                  if (result6 !== null) {
                    var result0 = result6;
                  } else {
                    var savedPos0 = pos;
                    var result3 = parse_LPAREN();
                    if (result3 !== null) {
                      var result4 = parse_expression();
                      if (result4 !== null) {
                        var result5 = parse_RPAREN();
                        if (result5 !== null) {
                          var result2 = [result3, result4, result5];
                        } else {
                          var result2 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                    var result1 = result2 !== null
                      ? (function(e) {
                        return "(" + e + ")";
                      })(result2[1])
                      : null;
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_object_literal() {
        var cacheKey = 'object_literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_LBRACE();
        if (result2 !== null) {
          var result5 = parse_object_arguments();
          var result3 = result5 !== null ? result5 : '';
          if (result3 !== null) {
            var result4 = parse_RBRACE();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(args) {
            return "{" + (args ? " " + args + " " : '') + "}";
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_object_arguments() {
        var cacheKey = 'object_arguments@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_object_argument();
        if (result4 !== null) {
          var result5 = parse_COMMA();
          if (result5 !== null) {
            var result6 = parse_object_arguments();
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(a, args) {
            return a + ", " + args;
          })(result3[0], result3[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_object_argument();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_object_argument() {
        var cacheKey = 'object_argument@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result8 = parse_identifier();
        if (result8 !== null) {
          var result9 = parse_COLON();
          if (result9 !== null) {
            var result10 = parse_expression();
            if (result10 !== null) {
              var result7 = [result8, result9, result10];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
        } else {
          var result7 = null;
          pos = savedPos1;
        }
        var result6 = result7 !== null
          ? (function(i, e) {
            return i + ": " + e;
          })(result7[0], result7[2])
          : null;
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var result3 = parse_string();
          if (result3 !== null) {
            var result4 = parse_COLON();
            if (result4 !== null) {
              var result5 = parse_expression();
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(s, e) {
              return s + ": " + e;
            })(result2[0], result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_array_literal() {
        var cacheKey = 'array_literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_LBRACKET();
        if (result2 !== null) {
          var result5 = parse_call_arguments();
          var result3 = result5 !== null ? result5 : '';
          if (result3 !== null) {
            var result4 = parse_RBRACKET();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(args) {
            return "[" + args + "]";
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[$a-zA-Z_]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[$a-zA-Z_]");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[$a-zA-Z_0-9]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[$a-zA-Z_0-9]");
            }
          }
          while (result4 !== null) {
            result3.push(result4);
            if (input.substr(pos).match(/^[$a-zA-Z_0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[$a-zA-Z_0-9]");
              }
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(first, rest) {
            var ident, __indexOf = [].indexOf || function(x){
            for (var i = this.length; i-- && this[i] !== x;); return i;
          };
          ident = first + "" + (rest ? rest.join("") : "");
          if (__indexOf.call(reserved_words, ident) >= 0) {
            throw new JinJSParseError("can't use '" + ident + "' as a variable name");
          }
          if (__indexOf.call(reserved_and_prefixed, ident) >= 0) {
            return "_" + ident;
          }
          return ident;
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primary_identifier() {
        var cacheKey = 'primary_identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_identifier();
        var result0 = result1 !== null
          ? (function(ident) {
            return ident in compilation_ctx
            ? ident + ""
            : "__ctx__." + ident;
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_filter_name() {
        var cacheKey = 'filter_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_filter_identifier();
        var result0 = result1 !== null
          ? (function(ident) {
            return "__filter_" + ident;
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_filter_identifier() {
        var cacheKey = 'filter_identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[_a-zA-Z]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[_a-zA-Z]");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[_a-zA-Z0-9]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[_a-zA-Z0-9]");
            }
          }
          while (result4 !== null) {
            result3.push(result4);
            if (input.substr(pos).match(/^[_a-zA-Z0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[_a-zA-Z0-9]");
              }
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(first, next) {
            return first + "" + (next ? next.join("") : "");
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = 'number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result10 = input.charAt(pos);
          pos++;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result10 !== null) {
          var result6 = [];
          while (result10 !== null) {
            result6.push(result10);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result10 = input.charAt(pos);
              pos++;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result6 = null;
        }
        if (result6 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result7 = ".";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result7 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result9 !== null) {
              var result8 = [];
              while (result9 !== null) {
                result8.push(result9);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result9 = input.charAt(pos);
                  pos++;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result8 = null;
            }
            if (result8 !== null) {
              var result5 = [result6, result7, result8];
            } else {
              var result5 = null;
              pos = savedPos0;
            }
          } else {
            var result5 = null;
            pos = savedPos0;
          }
        } else {
          var result5 = null;
          pos = savedPos0;
        }
        var result4 = result5 !== null
          ? (function(f, d, s) {
            return f.join("") + "" + d + s.join("");
          })(result5[0], result5[1], result5[2])
          : null;
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result3 !== null) {
            var result2 = [];
            while (result3 !== null) {
              result2.push(result3);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result3 = input.charAt(pos);
                pos++;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result2 = null;
          }
          var result1 = result2 !== null
            ? (function(n) {
              return n.join("") + "";
            })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string() {
        var cacheKey = 'string@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result20 = parse_space();
        var result13 = result20 !== null ? result20 : '';
        if (result13 !== null) {
          if (input.substr(pos, 1) === "'") {
            var result14 = "'";
            pos += 1;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("\"'\"");
            }
          }
          if (result14 !== null) {
            var result19 = parse_single_quoted_contents();
            var result15 = result19 !== null ? result19 : '';
            if (result15 !== null) {
              if (input.substr(pos, 1) === "'") {
                var result16 = "'";
                pos += 1;
              } else {
                var result16 = null;
                if (reportMatchFailures) {
                  matchFailed("\"'\"");
                }
              }
              if (result16 !== null) {
                var result18 = parse_space();
                var result17 = result18 !== null ? result18 : '';
                if (result17 !== null) {
                  var result12 = [result13, result14, result15, result16, result17];
                } else {
                  var result12 = null;
                  pos = savedPos1;
                }
              } else {
                var result12 = null;
                pos = savedPos1;
              }
            } else {
              var result12 = null;
              pos = savedPos1;
            }
          } else {
            var result12 = null;
            pos = savedPos1;
          }
        } else {
          var result12 = null;
          pos = savedPos1;
        }
        var result11 = result12 !== null
          ? (function(sglcnt) {
            return "'" + sglcnt + "'";
          })(result12[2])
          : null;
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var result10 = parse_space();
          var result3 = result10 !== null ? result10 : '';
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result4 !== null) {
              var result9 = parse_double_quoted_contents();
              var result5 = result9 !== null ? result9 : '';
              if (result5 !== null) {
                if (input.substr(pos, 1) === "\"") {
                  var result6 = "\"";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\\"\"");
                  }
                }
                if (result6 !== null) {
                  var result8 = parse_space();
                  var result7 = result8 !== null ? result8 : '';
                  if (result7 !== null) {
                    var result2 = [result3, result4, result5, result6, result7];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(dblcnt) {
              return "\"" + dblcnt + "\"";
            })(result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_regexp() {
        var cacheKey = 'regexp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result12 = parse_space();
        var result2 = result12 !== null ? result12 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === "/") {
            var result3 = "/";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"/\"");
            }
          }
          if (result3 !== null) {
            var result11 = parse_regexp_contents();
            var result4 = result11 !== null ? result11 : '';
            if (result4 !== null) {
              if (input.substr(pos, 1) === "/") {
                var result5 = "/";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result5 !== null) {
                if (input.substr(pos).match(/^[a-z]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[a-z]");
                  }
                }
                if (result10 !== null) {
                  var result9 = [];
                  while (result10 !== null) {
                    result9.push(result10);
                    if (input.substr(pos).match(/^[a-z]/) !== null) {
                      var result10 = input.charAt(pos);
                      pos++;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("[a-z]");
                      }
                    }
                  }
                } else {
                  var result9 = null;
                }
                var result6 = result9 !== null ? result9 : '';
                if (result6 !== null) {
                  var result8 = parse_space();
                  var result7 = result8 !== null ? result8 : '';
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(regcnt, modifs) {
            return "/" + regcnt + "/" + (modifs ? modifs.join("") : "");
          })(result1[2], result1[4])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_single_quoted_contents() {
        var cacheKey = 'single_quoted_contents@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_single_quoted_terminal();
        if (result4 !== null) {
          var result5 = parse_single_quoted_contents();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(s1, s2) {
            return s1 + s2;
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_single_quoted_terminal();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_single_quoted_terminal() {
        var cacheKey = 'single_quoted_terminal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "\\'") {
          var result2 = "\\'";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\'\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos).match(/^[^']/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[^']");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_double_quoted_contents() {
        var cacheKey = 'double_quoted_contents@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_double_quoted_terminal();
        if (result4 !== null) {
          var result5 = parse_double_quoted_contents();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(s1, s2) {
            return s1 + s2;
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_double_quoted_terminal();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_double_quoted_terminal() {
        var cacheKey = 'double_quoted_terminal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "\\\"") {
          var result2 = "\\\"";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\\\"\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_regexp_contents() {
        var cacheKey = 'regexp_contents@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_regexp_terminal();
        if (result4 !== null) {
          var result5 = parse_regexp_contents();
          if (result5 !== null) {
            var result3 = [result4, result5];
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(s1, s2) {
            return s1 + s2;
          })(result3[0], result3[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_regexp_terminal();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_regexp_terminal() {
        var cacheKey = 'regexp_terminal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "\\/") {
          var result2 = "\\/";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\/\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos).match(/^[^\/]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[^\\/]");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[	\n\r ]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[	\\n\\r ]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[	\n\r ]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("[	\\n\\r ]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function() {
            return " ";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_COMMA() {
        var cacheKey = 'COMMA@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === ",") {
            var result3 = ",";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\",\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return ",";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_COLON() {
        var cacheKey = 'COLON@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result3 = ":";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return ":";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QUESTION_MARK() {
        var cacheKey = 'QUESTION_MARK@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === "?") {
            var result3 = "?";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"?\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return "?";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LPAREN() {
        var cacheKey = 'LPAREN@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return "(";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RPAREN() {
        var cacheKey = 'RPAREN@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === ")") {
            var result3 = ")";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\")\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return ")";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LBRACE() {
        var cacheKey = 'LBRACE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result3 = "{";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return "\u007B";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RBRACE() {
        var cacheKey = 'RBRACE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === "}") {
            var result3 = "}";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"}\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return "\u007D";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LBRACKET() {
        var cacheKey = 'LBRACKET@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result3 = "[";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return "[";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RBRACKET() {
        var cacheKey = 'RBRACKET@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === "]") {
            var result3 = "]";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"]\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return "]";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PIPE() {
        var cacheKey = 'PIPE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_space();
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === "|") {
            var result3 = "|";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return "|";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOT() {
        var cacheKey = 'DOT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result3 = ".";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return ".";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IN() {
        var cacheKey = 'IN@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 2) === "in") {
            var result3 = "in";
            pos += 2;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"in\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return " in ";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ASSIGN() {
        var cacheKey = 'ASSIGN@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === "=") {
            var result3 = "=";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return " = ";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unary() {
        var cacheKey = 'unary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          var result3 = parse_UNARY_OPERATOR();
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(op) {
            return op + " ";
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UNARY_OPERATOR() {
        var cacheKey = 'UNARY_OPERATOR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "!") {
          var result10 = "!";
          pos += 1;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"!\"");
          }
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          if (input.substr(pos, 3) === "not") {
            var result9 = "not";
            pos += 3;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"not\"");
            }
          }
          var result8 = result9 !== null
            ? (function() {
              return "!";
            })()
            : null;
          if (result8 !== null) {
            var result0 = result8;
          } else {
            if (input.substr(pos, 1) === "~") {
              var result7 = "~";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"~\"");
              }
            }
            if (result7 !== null) {
              var result0 = result7;
            } else {
              if (input.substr(pos, 2) === "++") {
                var result6 = "++";
                pos += 2;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"++\"");
                }
              }
              if (result6 !== null) {
                var result0 = result6;
              } else {
                if (input.substr(pos, 2) === "--") {
                  var result5 = "--";
                  pos += 2;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"--\"");
                  }
                }
                if (result5 !== null) {
                  var result0 = result5;
                } else {
                  if (input.substr(pos, 6) === "typeof") {
                    var result4 = "typeof";
                    pos += 6;
                  } else {
                    var result4 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"typeof\"");
                    }
                  }
                  if (result4 !== null) {
                    var result0 = result4;
                  } else {
                    if (input.substr(pos, 4) === "void") {
                      var result3 = "void";
                      pos += 4;
                    } else {
                      var result3 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"void\"");
                      }
                    }
                    if (result3 !== null) {
                      var result0 = result3;
                    } else {
                      if (input.substr(pos, 3) === "new") {
                        var result2 = "new";
                        pos += 3;
                      } else {
                        var result2 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"new\"");
                        }
                      }
                      if (result2 !== null) {
                        var result0 = result2;
                      } else {
                        if (input.substr(pos, 6) === "delete") {
                          var result1 = "delete";
                          pos += 6;
                        } else {
                          var result1 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"delete\"");
                          }
                        }
                        if (result1 !== null) {
                          var result0 = result1;
                        } else {
                          var result0 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_post_unary() {
        var cacheKey = 'post_unary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          var result3 = parse_POST_UNARY_OPERATOR();
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(op) {
            return " " + op;
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_POST_UNARY_OPERATOR() {
        var cacheKey = 'POST_UNARY_OPERATOR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "++") {
          var result2 = "++";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"++\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 2) === "--") {
            var result1 = "--";
            pos += 2;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"--\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_binary() {
        var cacheKey = 'binary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result14 = parse_space();
        var result10 = result14 !== null ? result14 : '';
        if (result10 !== null) {
          var result11 = parse_TEXT_BINARY_OPERATOR();
          if (result11 !== null) {
            var result13 = parse_space();
            var result12 = result13 !== null ? result13 : '';
            if (result12 !== null) {
              var result9 = [result10, result11, result12];
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
        } else {
          var result9 = null;
          pos = savedPos1;
        }
        var result8 = result9 !== null
          ? (function(op) {
            return " " + op + " ";
          })(result9[1])
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result7 = parse_space();
          var result3 = result7 !== null ? result7 : '';
          if (result3 !== null) {
            var result4 = parse_BINARY_OPERATOR();
            if (result4 !== null) {
              var result6 = parse_space();
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(op) {
              return " " + op + " ";
            })(result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TEXT_BINARY_OPERATOR() {
        var cacheKey = 'TEXT_BINARY_OPERATOR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 10) === "instanceof") {
          var result5 = "instanceof";
          pos += 10;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"instanceof\"");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos, 3) === "and") {
            var result4 = "and";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"and\"");
            }
          }
          var result3 = result4 !== null
            ? (function() {
              return "&&";
            })()
            : null;
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 2) === "or") {
              var result2 = "or";
              pos += 2;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"or\"");
              }
            }
            var result1 = result2 !== null
              ? (function() {
                return "||";
              })()
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BINARY_OPERATOR() {
        var cacheKey = 'BINARY_OPERATOR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === ">>>") {
          var result28 = ">>>";
          pos += 3;
        } else {
          var result28 = null;
          if (reportMatchFailures) {
            matchFailed("\">>>\"");
          }
        }
        if (result28 !== null) {
          var result0 = result28;
        } else {
          if (input.substr(pos, 3) === "===") {
            var result27 = "===";
            pos += 3;
          } else {
            var result27 = null;
            if (reportMatchFailures) {
              matchFailed("\"===\"");
            }
          }
          if (result27 !== null) {
            var result0 = result27;
          } else {
            if (input.substr(pos, 3) === "!==") {
              var result26 = "!==";
              pos += 3;
            } else {
              var result26 = null;
              if (reportMatchFailures) {
                matchFailed("\"!==\"");
              }
            }
            if (result26 !== null) {
              var result0 = result26;
            } else {
              if (input.substr(pos, 2) === "==") {
                var result25 = "==";
                pos += 2;
              } else {
                var result25 = null;
                if (reportMatchFailures) {
                  matchFailed("\"==\"");
                }
              }
              if (result25 !== null) {
                var result0 = result25;
              } else {
                if (input.substr(pos, 2) === "!=") {
                  var result24 = "!=";
                  pos += 2;
                } else {
                  var result24 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"!=\"");
                  }
                }
                if (result24 !== null) {
                  var result0 = result24;
                } else {
                  if (input.substr(pos, 2) === ">=") {
                    var result23 = ">=";
                    pos += 2;
                  } else {
                    var result23 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">=\"");
                    }
                  }
                  if (result23 !== null) {
                    var result0 = result23;
                  } else {
                    if (input.substr(pos, 2) === "<=") {
                      var result22 = "<=";
                      pos += 2;
                    } else {
                      var result22 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"<=\"");
                      }
                    }
                    if (result22 !== null) {
                      var result0 = result22;
                    } else {
                      if (input.substr(pos, 2) === "&&") {
                        var result21 = "&&";
                        pos += 2;
                      } else {
                        var result21 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"&&\"");
                        }
                      }
                      if (result21 !== null) {
                        var result0 = result21;
                      } else {
                        if (input.substr(pos, 2) === "||") {
                          var result20 = "||";
                          pos += 2;
                        } else {
                          var result20 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"||\"");
                          }
                        }
                        if (result20 !== null) {
                          var result0 = result20;
                        } else {
                          if (input.substr(pos, 2) === "<<") {
                            var result19 = "<<";
                            pos += 2;
                          } else {
                            var result19 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"<<\"");
                            }
                          }
                          if (result19 !== null) {
                            var result0 = result19;
                          } else {
                            if (input.substr(pos, 2) === ">>") {
                              var result18 = ">>";
                              pos += 2;
                            } else {
                              var result18 = null;
                              if (reportMatchFailures) {
                                matchFailed("\">>\"");
                              }
                            }
                            if (result18 !== null) {
                              var result0 = result18;
                            } else {
                              if (input.substr(pos, 2) === "+=") {
                                var result17 = "+=";
                                pos += 2;
                              } else {
                                var result17 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"+=\"");
                                }
                              }
                              if (result17 !== null) {
                                var result0 = result17;
                              } else {
                                if (input.substr(pos, 2) === "-=") {
                                  var result16 = "-=";
                                  pos += 2;
                                } else {
                                  var result16 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"-=\"");
                                  }
                                }
                                if (result16 !== null) {
                                  var result0 = result16;
                                } else {
                                  if (input.substr(pos, 2) === "%=") {
                                    var result15 = "%=";
                                    pos += 2;
                                  } else {
                                    var result15 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"%=\"");
                                    }
                                  }
                                  if (result15 !== null) {
                                    var result0 = result15;
                                  } else {
                                    if (input.substr(pos, 2) === "/=") {
                                      var result14 = "/=";
                                      pos += 2;
                                    } else {
                                      var result14 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"/=\"");
                                      }
                                    }
                                    if (result14 !== null) {
                                      var result0 = result14;
                                    } else {
                                      if (input.substr(pos, 2) === "*=") {
                                        var result13 = "*=";
                                        pos += 2;
                                      } else {
                                        var result13 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"*=\"");
                                        }
                                      }
                                      if (result13 !== null) {
                                        var result0 = result13;
                                      } else {
                                        if (input.substr(pos, 1) === "=") {
                                          var result12 = "=";
                                          pos += 1;
                                        } else {
                                          var result12 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"=\"");
                                          }
                                        }
                                        if (result12 !== null) {
                                          var result0 = result12;
                                        } else {
                                          if (input.substr(pos, 1) === "|") {
                                            var result11 = "|";
                                            pos += 1;
                                          } else {
                                            var result11 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"|\"");
                                            }
                                          }
                                          if (result11 !== null) {
                                            var result0 = result11;
                                          } else {
                                            if (input.substr(pos, 1) === "/") {
                                              var result10 = "/";
                                              pos += 1;
                                            } else {
                                              var result10 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"/\"");
                                              }
                                            }
                                            if (result10 !== null) {
                                              var result0 = result10;
                                            } else {
                                              if (input.substr(pos, 1) === "^") {
                                                var result9 = "^";
                                                pos += 1;
                                              } else {
                                                var result9 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"^\"");
                                                }
                                              }
                                              if (result9 !== null) {
                                                var result0 = result9;
                                              } else {
                                                if (input.substr(pos, 1) === "&") {
                                                  var result8 = "&";
                                                  pos += 1;
                                                } else {
                                                  var result8 = null;
                                                  if (reportMatchFailures) {
                                                    matchFailed("\"&\"");
                                                  }
                                                }
                                                if (result8 !== null) {
                                                  var result0 = result8;
                                                } else {
                                                  if (input.substr(pos, 1) === "|") {
                                                    var result7 = "|";
                                                    pos += 1;
                                                  } else {
                                                    var result7 = null;
                                                    if (reportMatchFailures) {
                                                      matchFailed("\"|\"");
                                                    }
                                                  }
                                                  if (result7 !== null) {
                                                    var result0 = result7;
                                                  } else {
                                                    if (input.substr(pos, 1) === "+") {
                                                      var result6 = "+";
                                                      pos += 1;
                                                    } else {
                                                      var result6 = null;
                                                      if (reportMatchFailures) {
                                                        matchFailed("\"+\"");
                                                      }
                                                    }
                                                    if (result6 !== null) {
                                                      var result0 = result6;
                                                    } else {
                                                      if (input.substr(pos, 1) === ">") {
                                                        var result5 = ">";
                                                        pos += 1;
                                                      } else {
                                                        var result5 = null;
                                                        if (reportMatchFailures) {
                                                          matchFailed("\">\"");
                                                        }
                                                      }
                                                      if (result5 !== null) {
                                                        var result0 = result5;
                                                      } else {
                                                        if (input.substr(pos, 1) === "<") {
                                                          var result4 = "<";
                                                          pos += 1;
                                                        } else {
                                                          var result4 = null;
                                                          if (reportMatchFailures) {
                                                            matchFailed("\"<\"");
                                                          }
                                                        }
                                                        if (result4 !== null) {
                                                          var result0 = result4;
                                                        } else {
                                                          if (input.substr(pos, 1) === "%") {
                                                            var result3 = "%";
                                                            pos += 1;
                                                          } else {
                                                            var result3 = null;
                                                            if (reportMatchFailures) {
                                                              matchFailed("\"%\"");
                                                            }
                                                          }
                                                          if (result3 !== null) {
                                                            var result0 = result3;
                                                          } else {
                                                            if (input.substr(pos, 1) === "-") {
                                                              var result2 = "-";
                                                              pos += 1;
                                                            } else {
                                                              var result2 = null;
                                                              if (reportMatchFailures) {
                                                                matchFailed("\"-\"");
                                                              }
                                                            }
                                                            if (result2 !== null) {
                                                              var result0 = result2;
                                                            } else {
                                                              if (input.substr(pos, 1) === "*") {
                                                                var result1 = "*";
                                                                pos += 1;
                                                              } else {
                                                                var result1 = null;
                                                                if (reportMatchFailures) {
                                                                  matchFailed("\"*\"");
                                                                }
                                                              }
                                                              if (result1 !== null) {
                                                                var result0 = result1;
                                                              } else {
                                                                var result0 = null;;
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NEW() {
        var cacheKey = 'NEW@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          if (input.substr(pos, 3) === "new") {
            var result3 = "new";
            pos += 3;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"new\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
            return "new";
          })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_special_value() {
        var cacheKey = 'special_value@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result6 = parse_space();
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          var result3 = parse_SPECIAL();
          if (result3 !== null) {
            var result5 = parse_space();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s) {
            return s;
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SPECIAL() {
        var cacheKey = 'SPECIAL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 5) === "false") {
          var result6 = "false";
          pos += 5;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"false\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 4) === "true") {
            var result5 = "true";
            pos += 4;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"true\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos, 4) === "this") {
              var result4 = "this";
              pos += 4;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"this\"");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 4) === "void") {
                var result3 = "void";
                pos += 4;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"void\"");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos, 4) === "null") {
                  var result2 = "null";
                  pos += 4;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"null\"");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos, 9) === "undefined") {
                    var result1 = "undefined";
                    pos += 9;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"undefined\"");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_for() {
        var cacheKey = 'tag_for@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result10 = parse_identifier();
        if (result10 !== null) {
          var result11 = parse_IN();
          if (result11 !== null) {
            var result12 = parse_expression();
            if (result12 !== null) {
              var result9 = [result10, result11, result12];
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
        } else {
          var result9 = null;
          pos = savedPos1;
        }
        var result8 = result9 !== null
          ? (function(key, exp) {
            return {
            key: key,
            condition: exp
          };
          })(result9[0], result9[2])
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result3 = parse_identifier();
          if (result3 !== null) {
            var result4 = parse_COMMA();
            if (result4 !== null) {
              var result5 = parse_identifier();
              if (result5 !== null) {
                var result6 = parse_IN();
                if (result6 !== null) {
                  var result7 = parse_expression();
                  if (result7 !== null) {
                    var result2 = [result3, result4, result5, result6, result7];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(key, value, exp) {
              return {
              key: key,
              value: value,
              condition: exp
            };
            })(result2[0], result2[2], result2[4])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_let() {
        var cacheKey = 'tag_let@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_identifier();
        if (result2 !== null) {
          var result3 = parse_ASSIGN();
          if (result3 !== null) {
            var result4 = parse_expression();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(variable_name, expression) {
            return {
            variable_name: variable_name,
            expression: expression
          };
          })(result1[0], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_macro() {
        var cacheKey = 'tag_macro@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_identifier();
        if (result2 !== null) {
          var result3 = parse_LPAREN();
          if (result3 !== null) {
            var result6 = parse_macro_call_arguments();
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              var result5 = parse_RPAREN();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(function_name, args) {
            return {
            function_name: function_name,
            args: args == '' ? [] : args
          };
          })(result1[0], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_macro_call_arguments() {
        var cacheKey = 'macro_call_arguments@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_macro_argument();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result6 = parse_COMMA();
          if (result6 !== null) {
            var result7 = parse_macro_argument();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos1;
            }
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          var result4 = result5 !== null
            ? (function(arg) { return arg; })(result5[1])
            : null;
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result6 = parse_COMMA();
            if (result6 !== null) {
              var result7 = parse_macro_argument();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            var result4 = result5 !== null
              ? (function(arg) { return arg; })(result5[1])
              : null;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(first, other_args) {
            var arg, res;
          res = [first].concat((function(){
            var _i, _ref, _len, _results = [];
            for (_i = 0, _len = (_ref = other_args).length; _i < _len; ++_i) {
              arg = _ref[_i];
              _results.push(arg);
            }
            return _results;
          }()));
          return res;
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_macro_argument() {
        var cacheKey = 'macro_argument@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_identifier();
        if (result5 !== null) {
          var result6 = parse_ASSIGN();
          if (result6 !== null) {
            var result7 = parse_expression();
            if (result7 !== null) {
              var result4 = [result5, result6, result7];
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(name, exp) {
            return {
            name: name,
            default_value: exp
          };
          })(result4[0], result4[2])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_identifier();
          var result1 = result2 !== null
            ? (function(name) {
              return {
              name: name
            };
            })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_block() {
        var cacheKey = 'tag_block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result8 = parse_space();
        var result2 = result8 !== null ? result8 : '';
        if (result2 !== null) {
          if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z_]");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            if (input.substr(pos).match(/^[\-a-zA-Z0-9_]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[\\-a-zA-Z0-9_]");
              }
            }
            while (result7 !== null) {
              result4.push(result7);
              if (input.substr(pos).match(/^[\-a-zA-Z0-9_]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\-a-zA-Z0-9_]");
                }
              }
            }
            if (result4 !== null) {
              var result6 = parse_space();
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(first_letter, next_letters) {
            return first_letter + "" + (next_letters ? next_letters.join("") : '');
          })(result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag_import() {
        var cacheKey = 'tag_import@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result18 = parse_expression();
        if (result18 !== null) {
          var result30 = parse_space();
          var result19 = result30 !== null ? result30 : '';
          if (result19 !== null) {
            if (input.substr(pos, 6) === "import") {
              var result20 = "import";
              pos += 6;
            } else {
              var result20 = null;
              if (reportMatchFailures) {
                matchFailed("\"import\"");
              }
            }
            if (result20 !== null) {
              var result29 = parse_space();
              var result21 = result29 !== null ? result29 : '';
              if (result21 !== null) {
                var result22 = parse_variable_list();
                if (result22 !== null) {
                  var savedPos3 = pos;
                  var result25 = parse_space();
                  if (result25 !== null) {
                    if (input.substr(pos, 4) === "with") {
                      var result26 = "with";
                      pos += 4;
                    } else {
                      var result26 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"with\"");
                      }
                    }
                    if (result26 !== null) {
                      var result27 = parse_space();
                      if (result27 !== null) {
                        if (input.substr(pos, 7) === "context") {
                          var result28 = "context";
                          pos += 7;
                        } else {
                          var result28 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"context\"");
                          }
                        }
                        if (result28 !== null) {
                          var result24 = [result25, result26, result27, result28];
                        } else {
                          var result24 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result24 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result24 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result24 = null;
                    pos = savedPos3;
                  }
                  var result23 = result24 !== null ? result24 : '';
                  if (result23 !== null) {
                    var result17 = [result18, result19, result20, result21, result22, result23];
                  } else {
                    var result17 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos2;
                }
              } else {
                var result17 = null;
                pos = savedPos2;
              }
            } else {
              var result17 = null;
              pos = savedPos2;
            }
          } else {
            var result17 = null;
            pos = savedPos2;
          }
        } else {
          var result17 = null;
          pos = savedPos2;
        }
        var result16 = result17 !== null
          ? (function(exp, args, ctx) {
            return {
            template: exp,
            variables: args,
            with_context: ctx !== ""
          };
          })(result17[0], result17[4], result17[5])
          : null;
        if (result16 !== null) {
          var result0 = result16;
        } else {
          var savedPos0 = pos;
          var result3 = parse_expression();
          if (result3 !== null) {
            var result15 = parse_space();
            var result4 = result15 !== null ? result15 : '';
            if (result4 !== null) {
              if (input.substr(pos, 2) === "as") {
                var result5 = "as";
                pos += 2;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"as\"");
                }
              }
              if (result5 !== null) {
                var result14 = parse_space();
                var result6 = result14 !== null ? result14 : '';
                if (result6 !== null) {
                  var result7 = parse_identifier();
                  if (result7 !== null) {
                    var savedPos1 = pos;
                    var result10 = parse_space();
                    if (result10 !== null) {
                      if (input.substr(pos, 4) === "with") {
                        var result11 = "with";
                        pos += 4;
                      } else {
                        var result11 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"with\"");
                        }
                      }
                      if (result11 !== null) {
                        var result12 = parse_space();
                        if (result12 !== null) {
                          if (input.substr(pos, 7) === "context") {
                            var result13 = "context";
                            pos += 7;
                          } else {
                            var result13 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"context\"");
                            }
                          }
                          if (result13 !== null) {
                            var result9 = [result10, result11, result12, result13];
                          } else {
                            var result9 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result9 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos1;
                    }
                    var result8 = result9 !== null ? result9 : '';
                    if (result8 !== null) {
                      var result2 = [result3, result4, result5, result6, result7, result8];
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(exp, id, ctx) {
              return {
              template: exp,
              as_name: id,
              with_context: ctx !== ""
            };
            })(result2[0], result2[4], result2[5])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable_list() {
        var cacheKey = 'variable_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_identifier();
        if (result5 !== null) {
          var result6 = parse_COMMA();
          if (result6 !== null) {
            var result7 = parse_variable_list();
            if (result7 !== null) {
              var result4 = [result5, result6, result7];
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(id, list) {
            list.push(id);
          return list;
          })(result4[0], result4[2])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_identifier();
          var result1 = result2 !== null
            ? (function(id) {
              return [id];
            })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    var compilation_ctx, make_filter, reserved_words, reserved_and_prefixed, _ref;
      
  compilation_ctx = (_ref = arguments[2]) != null
      
    ? _ref
      
    : {};
      
  make_filter = function(expression, filters){
      
    var res, f, args, _i, _len;
      
    res = expression;
      
    for (_i = 0, _len = filters.length; _i < _len; ++_i) {
      
      f = filters[_i];
      
      args = "";
      
      if (f.args) {
      
        args = ", " + f.args;
      
      }
      
      res = f.name + "(" + res + args + ")";
      
    }
      
    return res;
      
  };
      
  reserved_words = ["abstract", "as", "boolean", "break", "byte", "case", "catch", "char", "class", "continue", "const", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "is", "long", "namespace", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "use", "var", "void", "volatile", "while", "with"];
      
  reserved_and_prefixed = ["super"];
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})(); var _parse = module.exports.parse; module.exports.parse = function (input, startRule, options) {if (startRule instanceof Object) { options = startRule; startRule = undefined; }return _parse (input, startRule, options);};